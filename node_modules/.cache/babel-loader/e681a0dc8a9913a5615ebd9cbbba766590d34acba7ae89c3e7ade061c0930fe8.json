{"ast":null,"code":"var _jsxFileName = \"/Users/prakhyamylavaram/Desktop/SJSU/Final_Project/ISS_new/src/components/VideoGrid.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoGrid = ({\n  videos = []\n}) => {\n  _s();\n  const [processedVideos, setProcessedVideos] = useState([]);\n  useEffect(() => {\n    // Process videos to extract duration and generate thumbnails\n    const processVideos = async () => {\n      const processedVideoPromises = videos.map(video => {\n        return new Promise((resolve, reject) => {\n          // Create a video element to get duration and thumbnail\n          const videoElement = document.createElement('video');\n          videoElement.preload = 'metadata';\n          videoElement.src = URL.createObjectURL(video.file);\n          videoElement.onloadedmetadata = () => {\n            // Create canvas to generate thumbnail\n            const canvas = document.createElement('canvas');\n            canvas.width = 300; // Fixed width to match screenshot\n            canvas.height = 200; // Fixed height to match screenshot\n\n            // Seek to middle of the video to capture a representative frame\n            videoElement.currentTime = videoElement.duration / 2;\n            videoElement.onseeked = () => {\n              // Draw video frame on canvas\n              const context = canvas.getContext('2d');\n\n              // Calculate scaling to maintain aspect ratio\n              const scale = Math.max(canvas.width / videoElement.videoWidth, canvas.height / videoElement.videoHeight);\n              const scaledWidth = videoElement.videoWidth * scale;\n              const scaledHeight = videoElement.videoHeight * scale;\n\n              // Center the image\n              const offsetX = (canvas.width - scaledWidth) / 2;\n              const offsetY = (canvas.height - scaledHeight) / 2;\n\n              // Clear canvas and draw the video frame\n              context.clearRect(0, 0, canvas.width, canvas.height);\n              context.drawImage(videoElement, offsetX, offsetY, scaledWidth, scaledHeight);\n\n              // Convert canvas to thumbnail\n              const thumbnailDataUrl = canvas.toDataURL('image/jpeg');\n\n              // Convert seconds to MM:SS format\n              const minutes = Math.floor(videoElement.duration / 60);\n              const seconds = Math.floor(videoElement.duration % 60);\n              resolve({\n                ...video,\n                duration: `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`,\n                thumbnail: thumbnailDataUrl\n              });\n\n              // Revoke object URLs to free memory\n              URL.revokeObjectURL(videoElement.src);\n            };\n\n            // Handle errors in video processing\n            videoElement.onerror = () => {\n              reject(new Error('Error processing video'));\n            };\n          };\n        });\n      });\n      try {\n        // Wait for all videos to be processed\n        const processedVideoResults = await Promise.all(processedVideoPromises);\n        setProcessedVideos(processedVideoResults);\n      } catch (error) {\n        console.error('Error processing videos:', error);\n      }\n    };\n\n    // Only process if there are new videos\n    if (videos.length > 0) {\n      processVideos();\n    }\n  }, [videos]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-between items-center mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-gray-600\",\n        children: [\"Videos \\u2022 \", processedVideos.length, \" videos\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-gray-600\",\n        children: \"Index created on Jan 13, 2025\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-3 gap-4\",\n      children: processedVideos.map((video, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"border rounded overflow-hidden\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: video.thumbnail,\n          alt: video.title || video.file.name,\n          className: \"w-full h-48 object-cover\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"font-semibold text-sm truncate\",\n            children: video.file.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-xs text-gray-500\",\n            children: video.duration\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n_s(VideoGrid, \"xaHlnd0DAzoQXoMi7qN25gagbNU=\");\n_c = VideoGrid;\nexport default VideoGrid;\nvar _c;\n$RefreshReg$(_c, \"VideoGrid\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","VideoGrid","videos","_s","processedVideos","setProcessedVideos","processVideos","processedVideoPromises","map","video","Promise","resolve","reject","videoElement","document","createElement","preload","src","URL","createObjectURL","file","onloadedmetadata","canvas","width","height","currentTime","duration","onseeked","context","getContext","scale","Math","max","videoWidth","videoHeight","scaledWidth","scaledHeight","offsetX","offsetY","clearRect","drawImage","thumbnailDataUrl","toDataURL","minutes","floor","seconds","toString","padStart","thumbnail","revokeObjectURL","onerror","Error","processedVideoResults","all","error","console","length","children","className","fileName","_jsxFileName","lineNumber","columnNumber","index","alt","title","name","_c","$RefreshReg$"],"sources":["/Users/prakhyamylavaram/Desktop/SJSU/Final_Project/ISS_new/src/components/VideoGrid.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst VideoGrid = ({ videos = [] }) => {\n  const [processedVideos, setProcessedVideos] = useState([]);\n\n  useEffect(() => {\n    // Process videos to extract duration and generate thumbnails\n    const processVideos = async () => {\n      const processedVideoPromises = videos.map(video => {\n        return new Promise((resolve, reject) => {\n          // Create a video element to get duration and thumbnail\n          const videoElement = document.createElement('video');\n          videoElement.preload = 'metadata';\n          videoElement.src = URL.createObjectURL(video.file);\n          \n          videoElement.onloadedmetadata = () => {\n            // Create canvas to generate thumbnail\n            const canvas = document.createElement('canvas');\n            canvas.width = 300;  // Fixed width to match screenshot\n            canvas.height = 200; // Fixed height to match screenshot\n            \n            // Seek to middle of the video to capture a representative frame\n            videoElement.currentTime = videoElement.duration / 2;\n            \n            videoElement.onseeked = () => {\n              // Draw video frame on canvas\n              const context = canvas.getContext('2d');\n              \n              // Calculate scaling to maintain aspect ratio\n              const scale = Math.max(\n                canvas.width / videoElement.videoWidth,\n                canvas.height / videoElement.videoHeight\n              );\n              \n              const scaledWidth = videoElement.videoWidth * scale;\n              const scaledHeight = videoElement.videoHeight * scale;\n              \n              // Center the image\n              const offsetX = (canvas.width - scaledWidth) / 2;\n              const offsetY = (canvas.height - scaledHeight) / 2;\n              \n              // Clear canvas and draw the video frame\n              context.clearRect(0, 0, canvas.width, canvas.height);\n              context.drawImage(\n                videoElement, \n                offsetX, \n                offsetY, \n                scaledWidth, \n                scaledHeight\n              );\n              \n              // Convert canvas to thumbnail\n              const thumbnailDataUrl = canvas.toDataURL('image/jpeg');\n              \n              // Convert seconds to MM:SS format\n              const minutes = Math.floor(videoElement.duration / 60);\n              const seconds = Math.floor(videoElement.duration % 60);\n              \n              resolve({\n                ...video,\n                duration: `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`,\n                thumbnail: thumbnailDataUrl\n              });\n              \n              // Revoke object URLs to free memory\n              URL.revokeObjectURL(videoElement.src);\n            };\n            \n            // Handle errors in video processing\n            videoElement.onerror = () => {\n              reject(new Error('Error processing video'));\n            };\n          };\n        });\n      });\n\n      try {\n        // Wait for all videos to be processed\n        const processedVideoResults = await Promise.all(processedVideoPromises);\n        setProcessedVideos(processedVideoResults);\n      } catch (error) {\n        console.error('Error processing videos:', error);\n      }\n    };\n\n    // Only process if there are new videos\n    if (videos.length > 0) {\n      processVideos();\n    }\n  }, [videos]);\n\n  return (\n    <div>\n      <div className=\"flex justify-between items-center mb-4\">\n        <div className=\"text-gray-600\">\n          Videos • {processedVideos.length} videos\n        </div>\n        <div className=\"text-gray-600\">\n          Index created on Jan 13, 2025\n        </div>\n      </div>\n      \n      <div className=\"grid grid-cols-3 gap-4\">\n        {processedVideos.map((video, index) => (\n          <div key={index} className=\"border rounded overflow-hidden\">\n            <img \n              src={video.thumbnail} \n              alt={video.title || video.file.name} \n              className=\"w-full h-48 object-cover\" \n            />\n            <div className=\"p-3\">\n              <div className=\"font-semibold text-sm truncate\">\n                {video.file.name}\n              </div>\n              <div className=\"text-xs text-gray-500\">\n                {video.duration}\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default VideoGrid;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}